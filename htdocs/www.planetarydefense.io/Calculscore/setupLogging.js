// setupLogging.js
// Script d'initialisation du syst√®me de logging

const fs = require('fs').promises;
const path = require('path');
const config = require('./logging.config');

async function setupLogging() {
    console.log('üîß Configuration du syst√®me de logging...');
    
    try {
        // Cr√©er le r√©pertoire des logs
        const logDir = path.join(__dirname, config.logDirectory);
        await fs.mkdir(logDir, { recursive: true });
        console.log(`‚úÖ R√©pertoire des logs cr√©√©: ${logDir}`);
        
        // Cr√©er un fichier README pour expliquer le syst√®me
        const readmeContent = `# Syst√®me de Logs - Planetary Defense

## Structure des fichiers de logs

- \`general_{date}.log\` - Logs g√©n√©raux du syst√®me
- \`warlord_{date}.log\` - Logs sp√©cifiques aux warlords
- \`performance_{date}.log\` - Logs de performance et temps d'ex√©cution
- \`error_{date}.log\` - Logs d'erreurs
- \`debug_{date}.log\` - Logs de d√©bogage

## Utilisation

### Consulter les logs
\`\`\`bash
# Lister tous les fichiers de logs
node logManager.js list

# Afficher les logs warlord du jour
node logManager.js warlord

# Afficher les logs warlord d'une date sp√©cifique
node logManager.js warlord 2025-01-15

# Afficher un r√©sum√© des logs du jour
node logManager.js summary

# Analyser les performances
node logManager.js analyze
\`\`\`

### Nettoyer les anciens logs
\`\`\`bash
# Nettoyer les logs de plus de 7 jours (d√©faut)
node logManager.js clean

# Nettoyer les logs de plus de 10 jours
node logManager.js clean 10
\`\`\`

## Configuration

Le fichier \`logging.config.js\` permet de personnaliser le syst√®me de logging.

## Logs des Warlords

Les logs warlord contiennent :
- R√©cup√©ration des faces warlord par propri√©taire
- Nombre de slots warlord calcul√©s
- Erreurs de r√©cup√©ration des donn√©es warlord
- D√©tails des faces warlord trouv√©es

## Rotation automatique

Les logs sont automatiquement nettoy√©s apr√®s 7 jours par d√©faut.
`;
        
        await fs.writeFile(path.join(logDir, 'README.md'), readmeContent, 'utf8');
        console.log('‚úÖ Fichier README cr√©√© dans le r√©pertoire logs');
        
        // Cr√©er un fichier .gitignore pour les logs
        const gitignoreContent = `# Logs
*.log
logs/
!logs/README.md
`;
        
        const gitignorePath = path.join(__dirname, '.gitignore');
        try {
            const existingGitignore = await fs.readFile(gitignorePath, 'utf8');
            if (!existingGitignore.includes('# Logs')) {
                await fs.appendFile(gitignorePath, '\n' + gitignoreContent, 'utf8');
                console.log('‚úÖ Entr√©es ajout√©es au .gitignore');
            }
        } catch (error) {
            // Le fichier .gitignore n'existe pas, on le cr√©e
            await fs.writeFile(gitignorePath, gitignoreContent, 'utf8');
            console.log('‚úÖ Fichier .gitignore cr√©√©');
        }
        
        console.log('\nüéâ Syst√®me de logging configur√© avec succ√®s !');
        console.log('\nüìã Prochaines √©tapes :');
        console.log('   1. Les logs seront automatiquement cr√©√©s lors de l\'ex√©cution');
        console.log('   2. Utilisez "node logManager.js summary" pour voir un r√©sum√©');
        console.log('   3. Utilisez "node logManager.js warlord" pour voir les logs warlord');
        console.log('   4. Consultez logs/README.md pour plus d\'informations');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration du logging:', error);
        process.exit(1);
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    setupLogging();
}

module.exports = { setupLogging };
